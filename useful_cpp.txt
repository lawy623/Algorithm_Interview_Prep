c++ all useful package and things:

- address and value
    &x                                                          ## get the address of x. Pass-by-Reference in function
    *x                                                          ## return the value

- clock()
    #include <time.h>                                           ## include lib
    clock_t start = clock()                                     ## record start clock
    (double)(start-end) / CLOCKS_PER_SEC                        ## different clock time to seconds
    ## in OpenMP mode, the clock_time will sum up. So it does not represent the real clock time.

- time using other:
    #include <sys/time.h>                                       ## import lib
    struct timeval start, end;                                  ## time struct
    gettimeofday(&start, NULL);                                 ## get start time
    gettimeofday(&end, NULL);                                   ## get end time
    double delta = ((end.tv_sec  - start.tv_sec) * 1000000u +
         end.tv_usec - start.tv_usec) / 1.e6;                   ## time difference

- float and double
    abs(float) <= 1e-6                                          ## whether float value is 0
    abs(double) <= 1e-15                                        ## whether double value is 0

- array []
    int arr [5] = {1,2,3,4,5}                                   ## Init an array
    int arr [] = {1,2,3,4,5}                                    ## Init an array without declare the length
    arr[idx]                                                    ## acces the idx
    int *ptr = arr                                              ## init a pointer of array

- array<int>
    array<int,3> arr {1,2,3}                                    ## Init an array
    arr[idx]                                                    ## access the idx
    sort(arr.begin(), arr.end())                                ## sort the array
    for(auto s : arr) {}                                        ## loop through the array
    array.size()                                                ## return the size
    array.empty()                                               ## return whether the array is empty

- vector<dtype> vec
    vector<int> v {1,2,3}                                       ## init vector by value
    vector<int> v(10)                                           ## init vector by length
    vector<int> vec (arr, arr+(sizeof(arr)/sizeof(arr[0])) )    ## init by an array
    vector<int> v1 (v2.begin(), v2.end())                       ## init by another vector
    vec[idx]                                                    ## access the idx
    vec.clear()                                                 ## clear the vector
    vec.size()                                                  ## vector size
    vec.push_back(10)                                           ## push back value at the end.
    vec.front()                                                 ## return the first val
    vec.back()                                                  ## return the last val
    vec.pop_back()                                              ## remove the last val
    vec.at(idx)                                                 ## access by index. same as vec[idx]
    sort(vec.begin(), vec.end());                               ## sort the vector
        static bool comp(int a, int b)                          ## sort by self defined static cmp func
        sort(v.begin(), v.end(), comp)
    vector<vector<int>> vec;                                    ## vector of vector(matrix), access by vec[i][j]
    for (auto x : vec) {}                                       ## access by auto var though the vector
    vector<int>::iterator it;                                   ## create iterator
        for(it=vec.begin(); it!=vec.end(); it++) {cout<<*it}    ## loop through using iterator, *it is the val
    vec.insert(vec.begin()+i, x)                                ## insert x at i+1 pos
    vec.erase(vec.begin()+i)                                    ## remove the i+i val
    vec.erase(vec.begin()+i, vec.begin()+j)                     ## remove from i+1 to j
    reverse(vec.begin(), vec.end())                             ## reverse the vector

- list
    list<int> l                                                 ## init list
    list<int>::iterator it                                      ## list iterator
    l.back()                                                    ## last element
    l.front()                                                   ## first element
    l.erase(iter)                                               ## erase a node by iter
    l.pop_back()                                                ## pop the last node out
    l.pop_front()                                               ## pop the first out
    l.push_front(3)                                             ## push back a node
    l.push_back(4)                                              ## push a node at front
    l.sort()                                                    ## sort the list
    l.unique()                                                  ## remove duplicate
    l.size()                                                    ## return size
    l.empty()                                                   ## check empty
    l.assign(1,2,3)                                             ## assign value
    l.assign(l2.begin(), l2.end())                              ## assign value by other list
    l.assign(array, array+3)                                    ## assign value by arr[]
    l.insert(it, 2, 3)                                          ## insert at iter for some values
    l.reverse()                                                 ## reverse list
    l.remove(target)                                            ## remove the target number
    l.merge(l2)                                                 ## merge two sorted list

- max/min
    max_element(vec.begin(), vec.end())                         ## return the max
    min_element(vec.begin(), vec.end())                         ## return the min
    INT_MAX / INT_MIN                                           ## max and min of integer

- heap (operation on vector)
    make_heap(vec.begin(), vec.end())                           ## make the heap to be the max heap. 'greater<int>()' as last argument turn it to min heap.
    vec.front()                                                 ## get the first val(max) from max heap
    vec.push_back(40); push_heap(vec.begin(), vec.end())        ## push a value
    pop_heap(v.begin(), v.end()); v.pop_back()                  ## remove the max
    sort_heap(v.begin(), v.end());                              ## need to sort heap after pop_back()

- priority_queue (max_heap)
    priority_queue<int> q(vec.begin(),vec.end());               ## max heap
    priority_queue<int, vector<int>, greater<int> >q;           ## min heap. Can init by q(vec.begin(),vec.end())
    q.pop()                                                     ## pop the heap's top
    q.top()                                                     ## get the heap's top
    q.push(val)                                                 ## push value

- queue<dtype> queue
    queue.push(x)                                               ## push a value at back
    queue.pop()                                                 ## pop the first value (FIFO), will not return value
    queue.front()                                               ## return the first value
    queue.back()                                                ## return the last value
    q.empty()                                                   ## return whether the queue is empty
    q.size()                                                    ## return the size

- stack<dtype> stack
    stack.push(x)                                               ## push a value at top
    stack.pop()                                                 ## pop the top value, will not return
    stack.top()                                                 ## return the top value
    stack.size()                                                ## return the size
    stack.empty()                                               ## return whether the queue is empty

- char *s
    char *s = "I am string.";                                   ## Init string. Last char always '\0'
    s[5] = '0';                                                 ## Access by index and assign char value.

- string
    string s（“sss")                                             ## init string
    s.length()                                                   ## length of string
    s.substr(start, length)                                      ## substring from start with length
    str.insert(pos, str2, start, length)                         ## insert at position with part of str2
    str.erase(start, length)                                     ## erase from start with length
    str.append(str2, start, length)                              ## append part of str2
    str += str2                                                  ## same as appending
    str.replace(start, length, str2, start2, length2)            ## replace part of str by part of str2
    str.assign(base)                                             ## assign base to str
    str.find(str2, start, length)                                ## find part of str2. Not found return string::npos
    str.rfind(str2, start, length)                               ## find from right.
    str.compare(start, length, str2, start2, length2)            ## compare part of str with part of str2
    to_string(val)                                               ## val to string
    stoi(str)                                                    ## string to int
    stof(Str)                                                    ## string to float


- map       (using RedBlack Tree)
    map<int, int> m;                                            ## init a map, with key-value specify
    m[1] = 10                                                   ## assign value
    map.insert({key, val})                                      ## insert value
    map.insert(pair<int,int>(3,3))                              ## insert by specify a pair
    map.insert(m2.begin(), m2.end())                            ## insert by copying map2
    map<int,int>::iterator it;                                  ## iterator
        it -> first                                             ## iter -> key
        it -> second                                            ## iter -> val
    map.size()                                                  ## number of pairs in map
    map.empty()                                                 ## whether map is empty
    map.find(key)                                               ## return an iterator。 return map.end() is not found
    map.count(key)                                              ## number of times key appear
    map.erase(key)                                              ## remove pair by key
    map.erase(map.find(key))                                    ## remove pair by iterator
    iter = map.equal_range(key)                                 ## equal range finder
        iter.first -> first/second                              ## lower bound (not bigger than key)
        iter.second -> first/second                             ## upper bound (first bigger than key)

- unordered_map  (using hash table)
    unordered_map<int, int> m;                                  ## init. Other methods are the same as 'map'

- unordered_multimap
    unordered_multimap<int, pair<int, int>> map;                ## one key with two values
    unordered_multimap<int, tuple<int, int, int>> map;          ## one key with multiple values
    map.insert(make_pair(key, make_pair(v1, v2)));              ## insert value
    iter -> first                                               ## get key from iterator
    iter -> second.first                                        ## get first val in pair from iterator
    iter -> second.second                                       ## get second val in pair from iterator

- struct
    struct TreeNode {                                           ## sample of defining a struct
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
        TreeNode(int x) :
                val(x), left(NULL), right(NULL) {
        }
    };



------------ cpp template --------------
#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;

    int a, b;
    while(n--) {
        cin >> a >> b;
    }
    //you implementation or use func
    // func(a, b)

    return 0;
}

-------- compiled by -----------
g++ -o temp template.cpp -Wall
