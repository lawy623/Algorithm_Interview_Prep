Python all useful package and things:

- List []
    l = []                               ## Initial a empty list
    l.append(ele)                        ## Append an element into the list
    l.extend(list)			 ## Combine two list
    l.insert(i, x)			 ## insert x at pos i
    l.remove(x)				 ## remove the first x
    l.pop([i])				 ## pop and remove the i-th one (No specify will return the last)
    l.index(x)				 ## return the first index of x
    l.count(x)				 ## count the number of x
    l.reverse()				 ## inplace reverse
    l.sort()				 ## sort list
    len(list)				 ## length
    sum(list)				 ## sum of all elements

- List as Stack
    stack = [...]            ## Init a stack. Last item is like the top of stack
    stack.append(7)          ## Add to last
    stack.pop()              ## Pop the last

- List as Queue
    queue = []               ## Init a queue. New items will be at later pos.
    queue.append(a)          ## Add to last
    queue.pop([0])           ## Pop the first (oldest) -- This is slow because it needs to move all.

- from collections import deque
    queue = deque([a,b,c])   ## Init a queue
    queue.append(d)          ## Add to last
    queue.popleft()          ## Pop the oldest

- Tuple ()
    tuple = ("a", "b", "c")              ## Init a tuple

- string s
    fields = s.split(" ")                ## Split the string into fields by " "(Can change to other delimiter)
    '|'.join(list)                       ## Join the list separate by '|'. Like '1|2|3|4'
    s.replace('a','b')                   ## Replace all 'a' into 'b'.
    x in s                               ## Check whether x is in string s
    s.strip('\n')                        ## Trim \n or other
    s.capitalize()                       ## Change to upper cases
    s.casefold()                         ## Change to lower cases
    s.count('x')                         ## Count the number of x
    endwith(str)                         ## Return whether s is endwith str
    s.find(str)                          ## Find the first place of str in s
    s.format()                           ## Format string({} place in string)
    s.isalnum()                          ## string is all num or alpha
    s.isalpha()                          ## string is all alpha
    s.isdigit()                          ## string is all digits
    s.islower()                          ## string is all lowercases
    s.isspace()                          ## string is all whitespaces
    s.isupper()                          ## string is all uppercases

- set
    s = set(['a','b'])                   ## Init a set
    s.add('c')                           ## Add an element into a set
    s.update(['d', 'e'])
    s.remove('a')                        ## Remove an element from a set
    set(list1) == set(list2)             ## Compare whether 2 unordered lists are identical
    set1 op set2                         ## use operations +,-,|,&,^

- dict
    s = {'a':1, 'b':2}                   ## Init a dict
    s.keys()                             ## list all keys
    s.values()                           ## list all values
    s.items()                            ## list all k-v pairs
    s.get(key)                           ## get the value from a key
    s.pop(key)                           ## remove key
    s.popitem()                          ## remove the last item

- class
    def __init__(self, args)             ## Init a class obj
    def func(self, args)                 ## Define a public method
    __private_att = 0                    ## Private var. But can be accessed by _classname__private
    def __private_method                 ## Private method
    isinstance(obj, class)               ## Return whether obj is an instance of class
    super(class, self).func()            ## Call parent's function
    __str__                              ## By default is the address
    __del__                              ## Use when delete the obj
    __call__                             ## Use the classname as a function directly
    __lt__                               ## Implement and you can compare with a value
    __hasattr__                          ## Whether obj has att/method
    __setattr__                          ## Set an attr with value
    __getattr__                          ## Return an att
    __len__                              ## Length
    __setitem__                          ## Set item by index
    __getitem__                          ## Get item by index
    __slots__                            ## Set limit for dynamics blinding att and method
    __dict__                             ## Info of all method/att of an obj class
    @property                            ## Getter of an att. Use to decorate a func
    @att.setter                          ## Setter of an att. (Not set it means it is private att)
    @staticmethod                        ## Can use the class method to call the method(e.g. math.log)
    @classmethod func(cls, arg)          ## Like staticmethod, but need arg 'cls' at first

- map
    map(func, iterable)                  ## map a function to all things in an iterable(list, dict)
    f = lambda x: x ** 2                 ## lambda function to avoid set the function name. Can be use as func in map.
    map(f, list)                         ## Sample of the usage

- iter
    x = iter(list)           ## Change to iterable (you can use 'for' now)
    next(x)                  ## Get the next value
    __iter__(self)           ## Need to implement in the class
    __next__(self)           ## Need to implement in the class(raise StopIteration)

- generator (It returns an iter)
    yield                    ## use it in function to yield the item. Now you can use next or for like an iter. Last one may raise StopIteration. (good for dataloader)

- zip
    zip(a, b)                ## Pack two iterable into a tuple.

- dir
    dir(obj)				 ## Return the methods, attributes of object.

- help
    help(method)			 ## See the usage of method

- id [obj]
    addr = id(x)			 ## Return the memory address of object x

- type
    type(obj)                ## return type of an object

- File I/O
    file = open(file_path, 'r')          ## Open file for reading
    file = open(file_path, 'w')          ## Open file for writing
    file = open(file_path, 'a')          ## Open file for append writing
    l = file.readline()                  ## Read a line from current open file
    file.write(l)                        ## Write a line into a open file

- os
    os.listdir(path)                     ## List folder of a given path
    os.path.join(path1, path2, ...)      ## Join paths by using '/'
    os.path.exists(path)		 ## Whether path exists
    os.mkdir(dir)			 ## make a directory
    os.remove(path)		         ## remove the object

- shutil
    shutil.copy(src, dst)	 	 ## copy the file src to dst
    shutil.copytree(src, dst)		 ## Copy the whole folder recursively
    shutil.move(src, dst)		 ## Move the whole folder/file
    shutil.rmtree(src)			 ## Remove the whole folder recursively

- decorator                      ## Let the foo function has both its own content and the decorator's add.
    def use_decorator(func):
        def wrapper(*args, **kwargs):
            ## Add new content
            return func(*args)
        return wrapper
    @use_decorator               ## This also allows args inside. So wrapper can be more flexible. / You can use multiple decorators as well.
    def foo():
        ## Methods

- package [glob]
    glob.glob(exp)			 ## parse the reg expression and list all files matched.

- package [collections]
    - from collections import defaultdict       ## Import the defaultdic package
        a = defaultdict(int)                    ## Init dic, specify the default type of the value. No key pair will have value that is default in that type.
        a.items()                               ## Print all k-v pairs in the dict

- package [enum]
    - from enum import Enum                     ## Import  an enum
        Enum('name',('val1', 'val2'....))       ## Set values
        name.val1                               ## Get value.
        name.__members__.items()                ## Get the name and value
- package [argparse]
    parser = argparse.ArgumentParser(description='des', usage='use')  ## Create the parser
    parser.add_argument('-w','--work', default=, type=, choices, actionmetavar=, help=)   ## Define the corresponding arg.
    args = parser.parse_args()        ## Parse the args

- package [numpy]
    - import numpy as np		 ## Import the lib
    - x = np.zeros((2,3))		 ## Init zero matrix
    - y = np.zeros_like(x)		 ## Zero matrix with same shape as x
    - x = np.arange(8)			 ## Init using range
    - x.ndim				 ## Dimension of np array
    - x.shape			  	 ## Shape of np array
    - x.size				 ## num of elements in np array
    - x[4], x[4:5,:], x[6,-1]		 ## Indexing of np array
    - x.take(ind)			 ## Indexing using index
    - x.reshape((4,5)) or (4,-1)	 ## Reshape the np array
    - x.flatten(order='C')		 ## Flatten the array('C':row base;'F': col base)
    - x.ravel()				 ## Flatten as row base
    - x.transpose()			 ## Transpose
    - x.swapaxes(axis1, axis2)		 ## Swap two axis(will change dimension order)
    - x.squeeze(axis)			 ## Remove the axis with dim=1
    - x.expand_dims(axis)		 ## Expand a dim with 1
    - np.broadcast(x,y)			 ## Broadcast the shape
    - np.concatenate((x1,x2..),axis)	 ## Concatenate along an axis
    - np.stack((x1,x2),axis)		 ## Stack two array along an axis(vstack and hstack)
    - np.tile(x, repr)           ## Tile(repeat) x in each dim following repr
    - np.repeat(x, times, axis)  ## Repeate x in some axis for times
    - np.logical_and(x1,x2)      ## Logical and
    - np.ufunc.reduce((x1,x2,x3))## Apply ufunc along the axis and reduce the final dimension
